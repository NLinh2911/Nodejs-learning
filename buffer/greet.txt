hello world !!!!!!!!
Keep in mind though, that root is only a personal preference. You can call the id whatever you like. You only need to make sure that it matches up later on when you sync the html to your JavaScript code.
This div will function like it does in React. It will tell the JavaScript library, in this case Vue, where to look in the DOM when it wants to start making changes.
Once that’s done, you’re going to create a JavaScript file that will house all the Vue code. Call it app.js, to stay consistent.
So now that you have your files ready to go, let’s get into how Vue displays element onto the browser.
Vue uses a template-like approach when it comes to manipulating the DOM. This means that your HTML file will not only have an empty div, like in React. You’re actually going to write a good part of your code in your HTML file.
To give you a better idea, think back on what it takes to create a list of name using plain HTML. A <ul> element with some <li> elements inside. In Vue, you are going to do almost the exact same thing, with only a few changes added in.

A directive is Vue’s way of adding JavaScript functionality straight into the HTML. They all start with v- and are followed by descriptive names that give you an idea of what they are doing. In this case, it’s a for loop. For every name in your list of names, listOfNames, you want to copy this <li> element and replace it with a new <li> element with a name from your list.
Now, the code only needs one final touch. Currently, it will display an <li> element for every name in your list, but you have not actually told it to display the actual name onto the browser. To fix that, you are going to insert some mustache like syntax inside your <li> element. Something you might have seen in some other JavaScript libraries.
<ul>
  <li v-for=’name in listOfNames’>
    {{name}}
  </li>
</ul>
Now the <li> element is complete. It will now display each item inside a list called listOfNames. Keep in mind that the word name is arbitrary. You could have called it item and it would have served the same purpose. All the keyword does is serve as a placeholder that will be used to iterate over the list.
The last thing that you need to do is create the data set and actually initialize Vue in your application.
To do so, you will need to create a new Vue instance. Instantiate it by assigning it to a variable called app.
let app = new Vue({
});
Now, the object is going to take in a few parameters. The first one being the most important, the el (element) parameter that tells Vue where to start adding things to the DOM. Just like you did with your React example.
let app = new Vue({
  el:’#root’,
});
The final step is to add the data to the Vue application. In Vue, all the data passed into the application will be done so as a parameter to the Vue instance. Also, each Vue instance can only have one parameter of each kind. While there are quite a few, you only need to focus on two for this example, el and data.
Objec­tive : In chess, a queen can move as far as she pleases, hor­i­zon­tally, ver­ti­cally, or diag­o­nally. A chess board has 8 rows and 8 columns. The stan­dard 8 by 8 Queen’s prob­lem asks how to place 8 queens on an ordi­nary chess board so that none of them can hit any other in one move.(Source: http://www.math.utah.edu/~alfeld/queens/queens.html)

Here we are solv­ing it for N queens in NxN chess board.

This article will challenge the very limits of your Node.js knowledge.
I started learning Node.js shortly after Ryan Dahl first presented it, and I wasn’t able to answer a lot of the questions I ask in this article even a year ago. If you can truly answer all of these questions, then your knowledge of Node.js is beyond great. We should be friends.
The reason I think this challenge will take you by surprise is that many of us have been mostly learning Node the wrong way. Most tutorials, books, and courses about Node focus on the Node ecosystem — not the Node runtime itself. They focus on teaching what can be done with all the packages available for you when you work with Node, like Express and Socket.IO, rather than teaching the capabilities of the Node runtime itself.
There are good reasons for this. Node is raw and flexible. It doesn’t provide complete solutions, but rather provides a rich runtime that enables you to implement solutions of your own. Libraries like Express.js and Socket.IO are more of complete solutions, so it makes more sense to teach those libraries, so you can enable learners to use these complete solutions.
The conventional wisdom seems to be that only those whose job is to write libraries like Express.js and Socket.IO need to understand everything about the Node.js runtime. But I think this is wrong. A solid understanding of the Node.js runtime itself is the best thing you can do before using those complete solutions. You should at least have the knowledge and confidence to judge a package by its code, so you can make an educated decision about using it.
This is why I decided to create a Pluralsight course fully dedicated to pure Node. While doing the research for the course, I put together a list of specific questions for you to determine whether your knowledge of the Node runtime is already strong enough, or if it could be improved.
If you can answer most of these questions and you’re looking for a job, let me know! If on the other hand, most of these questions take you by surprise, you just need to make learning the Node runtime itself a priority. Your knowledge of that will make you a much more desirable developer.
The Node.js knowledge challenge:
Some of these questions are short and easy while others require longer answers and deeper knowledge. They are all presented here in no particular order.
I know that you’re going to want answers after reading this list. The advice section below has some answers, but I’ll also be answering all of these questions in a series of freeCodeCamp articles after this one. But let me tease your knowledge first!
What is the relationship between Node.js and V8? Can Node work without V8?
How come when you declare a global variable in any Node.js file it’s not really global to all modules?
When exporting the API of a Node module, why can we sometimes use exports and other times we have to use module.exports?
Can we require local files without using relative paths?
Can different versions of the same package be used in the same application?
What is the Event Loop? Is it part of V8?
What is the Call Stack? Is it part of V8?
What is the difference between setImmediate and process.nextTick?
How do you make an asynchronous function return a value?
Can callbacks be used with promises or is it one way or the other?
What Node module is implemented by most other Node modules?
What are the major differences between spawn, exec, and fork?
How does the cluster module work? How is it different than using a load balancer?
What are the --harmony-* flags?
How can you read and inspect the memory usage of a Node.js process?
What will Node do when both the call stack and the event loop queue are empty?
What are V8 object and function templates?
What is libuv and how does Node.js use it?
How can you make Node’s REPL always use JavaScript strict mode?
What is process.argv? What type of data does it hold?
How can we do one final operation before a Node process exits? Can that operation be done asynchronously?
What are some of the built-in dot commands that you can use in Node’s REPL?
Besides V8 and libuv, what other external dependencies does Node have?
What’s the problem with the process uncaughtException event? How is it different than the exit event?
What does the _ mean inside of Node’s REPL?
Do Node buffers use V8 memory? Can they be resized?
What’s the difference between Buffer.alloc and Buffer.allocUnsafe?
How is the slice method on buffers different from that on arrays?
What is the string_decoder module useful for? How is it different than casting buffers to strings?
What are the 5 major steps that the require function does?
How can you check for the existence of a local module?
What is the main property in package.json useful for?
What are circular modular dependencies in Node and how can they be avoided?
What are the 3 file extensions that will be automatically tried by the require function?
When creating an http server and writing a response for a request, why is the end() function required?
When is it ok to use the file system *Sync methods?
How can you print only one level of a deeply nested object?
What is the node-gyp package used for?
The objects exports, require, and module are all globally available in every module but they are different in every module. How?
If you execute a node script file that has the single line: console.log(arguments);, what exactly will node print?
How can a module be both requirable by other modules and executable directly using the node command?
What’s an example of a built-in stream in Node that is both readable and writable?
What happens when the line cluster.fork() gets executed in a Node script?
What’s the difference between using event emitters and using simple callback functions to allow for asynchronous handling of code?
What is the console.time function useful for?
What’s the difference between the Paused and the Flowing modes of readable streams?
What does the --inspect argument do for the node command?
How can you read data from a connected socket?
The require function always caches the module it requires. What can you do if you need to execute the code in a required module many times?
When working with streams, when do you use the pipe function and when do you use events? Can those two methods be combined?
My take on the best way to learn the Node.js runtime
Learning Node.js can be challenging. Here are some of the guidelines that I hope will help along that journey:
Learn the good parts of JavaScript and learn its modern syntax (ES2015 and beyond)
Node is a set of libraries on top of a VM engine which can compile JavaScript so it goes without saying that the important skills for JavaScript itself is a subset of the important skills for Node. You should start with JavaScript itself.
Do you understand functions, scopes, binding, this keyword, new keyword, closures, classes, module patterns, prototypes, callbacks, and promises? Are you aware of the various methods that can be used on Numbers, Strings, Arrays, Sets, Objects, and Maps? Getting yourself comfortable with the items on this list will make learning the Node API much easier. For example, trying to learn the ‘fs’ module methods before you have a good understanding of callbacks may lead to unnecessary confusion.
Understand the non-blocking nature of Node
Callbacks and promises (and generators/async patterns) are especially important for Node. You need to understand how asynchronous operations are first class in Node.
You can compare the non-blocking nature of lines of code in a Node program to the way you order a Starbucks coffee (in the store, not the drive-thru):
Place your order | Give Node some instructions to execute (a function)
Customize your order, no whipped cream for example | Give the function some arguments: ({whippedCream: false})
Give the Starbucks worker your name with the order | Give Node a callback with your function: ({whippedCream: false}, callback)
Step aside and the Starbucks worker will take orders from people who were after you in line | Node will take instructions from lines after yours.
When your order is ready, the Starbucks worker will call your name and give you your order | When your function is computed and Node.js has a ready result for you, it’ll call your callback with that result: callback(result)
I’ve written a blog post about this: Asynchronous Programming as Seen at Starbucks
hello world !!!!!!!!
Keep in mind though, that root is only a personal preference. You can call the id whatever you like. You only need to make sure that it matches up later on when you sync the html to your JavaScript code.
This div will function like it does in React. It will tell the JavaScript library, in this case Vue, where to look in the DOM when it wants to start making changes.
Once that’s done, you’re going to create a JavaScript file that will house all the Vue code. Call it app.js, to stay consistent.
So now that you have your files ready to go, let’s get into how Vue displays element onto the browser.
Vue uses a template-like approach when it comes to manipulating the DOM. This means that your HTML file will not only have an empty div, like in React. You’re actually going to write a good part of your code in your HTML file.
To give you a better idea, think back on what it takes to create a list of name using plain HTML. A <ul> element with some <li> elements inside. In Vue, you are going to do almost the exact same thing, with only a few changes added in.

A directive is Vue’s way of adding JavaScript functionality straight into the HTML. They all start with v- and are followed by descriptive names that give you an idea of what they are doing. In this case, it’s a for loop. For every name in your list of names, listOfNames, you want to copy this <li> element and replace it with a new <li> element with a name from your list.
Now, the code only needs one final touch. Currently, it will display an <li> element for every name in your list, but you have not actually told it to display the actual name onto the browser. To fix that, you are going to insert some mustache like syntax inside your <li> element. Something you might have seen in some other JavaScript libraries.
<ul>
  <li v-for=’name in listOfNames’>
    {{name}}
  </li>
</ul>
Now the <li> element is complete. It will now display each item inside a list called listOfNames. Keep in mind that the word name is arbitrary. You could have called it item and it would have served the same purpose. All the keyword does is serve as a placeholder that will be used to iterate over the list.
The last thing that you need to do is create the data set and actually initialize Vue in your application.
To do so, you will need to create a new Vue instance. Instantiate it by assigning it to a variable called app.
let app = new Vue({
});
Now, the object is going to take in a few parameters. The first one being the most important, the el (element) parameter that tells Vue where to start adding things to the DOM. Just like you did with your React example.
let app = new Vue({
  el:’#root’,
});
The final step is to add the data to the Vue application. In Vue, all the data passed into the application will be done so as a parameter to the Vue instance. Also, each Vue instance can only have one parameter of each kind. While there are quite a few, you only need to focus on two for this example, el and data.
Objec­tive : In chess, a queen can move as far as she pleases, hor­i­zon­tally, ver­ti­cally, or diag­o­nally. A chess board has 8 rows and 8 columns. The stan­dard 8 by 8 Queen’s prob­lem asks how to place 8 queens on an ordi­nary chess board so that none of them can hit any other in one move.(Source: http://www.math.utah.edu/~alfeld/queens/queens.html)

Here we are solv­ing it for N queens in NxN chess board.

This article will challenge the very limits of your Node.js knowledge.
I started learning Node.js shortly after Ryan Dahl first presented it, and I wasn’t able to answer a lot of the questions I ask in this article even a year ago. If you can truly answer all of these questions, then your knowledge of Node.js is beyond great. We should be friends.
The reason I think this challenge will take you by surprise is that many of us have been mostly learning Node the wrong way. Most tutorials, books, and courses about Node focus on the Node ecosystem — not the Node runtime itself. They focus on teaching what can be done with all the packages available for you when you work with Node, like Express and Socket.IO, rather than teaching the capabilities of the Node runtime itself.
There are good reasons for this. Node is raw and flexible. It doesn’t provide complete solutions, but rather provides a rich runtime that enables you to implement solutions of your own. Libraries like Express.js and Socket.IO are more of complete solutions, so it makes more sense to teach those libraries, so you can enable learners to use these complete solutions.
The conventional wisdom seems to be that only those whose job is to write libraries like Express.js and Socket.IO need to understand everything about the Node.js runtime. But I think this is wrong. A solid understanding of the Node.js runtime itself is the best thing you can do before using those complete solutions. You should at least have the knowledge and confidence to judge a package by its code, so you can make an educated decision about using it.
This is why I decided to create a Pluralsight course fully dedicated to pure Node. While doing the research for the course, I put together a list of specific questions for you to determine whether your knowledge of the Node runtime is already strong enough, or if it could be improved.
If you can answer most of these questions and you’re looking for a job, let me know! If on the other hand, most of these questions take you by surprise, you just need to make learning the Node runtime itself a priority. Your knowledge of that will make you a much more desirable developer.
The Node.js knowledge challenge:
Some of these questions are short and easy while others require longer answers and deeper knowledge. They are all presented here in no particular order.
I know that you’re going to want answers after reading this list. The advice section below has some answers, but I’ll also be answering all of these questions in a series of freeCodeCamp articles after this one. But let me tease your knowledge first!
What is the relationship between Node.js and V8? Can Node work without V8?
How come when you declare a global variable in any Node.js file it’s not really global to all modules?
When exporting the API of a Node module, why can we sometimes use exports and other times we have to use module.exports?
Can we require local files without using relative paths?
Can different versions of the same package be used in the same application?
What is the Event Loop? Is it part of V8?
What is the Call Stack? Is it part of V8?
What is the difference between setImmediate and process.nextTick?
How do you make an asynchronous function return a value?
Can callbacks be used with promises or is it one way or the other?
What Node module is implemented by most other Node modules?
What are the major differences between spawn, exec, and fork?
How does the cluster module work? How is it different than using a load balancer?
What are the --harmony-* flags?
How can you read and inspect the memory usage of a Node.js process?
What will Node do when both the call stack and the event loop queue are empty?
What are V8 object and function templates?
What is libuv and how does Node.js use it?
How can you make Node’s REPL always use JavaScript strict mode?
What is process.argv? What type of data does it hold?
How can we do one final operation before a Node process exits? Can that operation be done asynchronously?
What are some of the built-in dot commands that you can use in Node’s REPL?
Besides V8 and libuv, what other external dependencies does Node have?
What’s the problem with the process uncaughtException event? How is it different than the exit event?
What does the _ mean inside of Node’s REPL?
Do Node buffers use V8 memory? Can they be resized?
What’s the difference between Buffer.alloc and Buffer.allocUnsafe?
How is the slice method on buffers different from that on arrays?
What is the string_decoder module useful for? How is it different than casting buffers to strings?
What are the 5 major steps that the require function does?
How can you check for the existence of a local module?
What is the main property in package.json useful for?
What are circular modular dependencies in Node and how can they be avoided?
What are the 3 file extensions that will be automatically tried by the require function?
When creating an http server and writing a response for a request, why is the end() function required?
When is it ok to use the file system *Sync methods?
How can you print only one level of a deeply nested object?
What is the node-gyp package used for?
The objects exports, require, and module are all globally available in every module but they are different in every module. How?
If you execute a node script file that has the single line: console.log(arguments);, what exactly will node print?
How can a module be both requirable by other modules and executable directly using the node command?
What’s an example of a built-in stream in Node that is both readable and writable?
What happens when the line cluster.fork() gets executed in a Node script?
What’s the difference between using event emitters and using simple callback functions to allow for asynchronous handling of code?
What is the console.time function useful for?
What’s the difference between the Paused and the Flowing modes of readable streams?
What does the --inspect argument do for the node command?
How can you read data from a connected socket?
The require function always caches the module it requires. What can you do if you need to execute the code in a required module many times?
When working with streams, when do you use the pipe function and when do you use events? Can those two methods be combined?
My take on the best way to learn the Node.js runtime
Learning Node.js can be challenging. Here are some of the guidelines that I hope will help along that journey:
Learn the good parts of JavaScript and learn its modern syntax (ES2015 and beyond)
Node is a set of libraries on top of a VM engine which can compile JavaScript so it goes without saying that the important skills for JavaScript itself is a subset of the important skills for Node. You should start with JavaScript itself.
Do you understand functions, scopes, binding, this keyword, new keyword, closures, classes, module patterns, prototypes, callbacks, and promises? Are you aware of the various methods that can be used on Numbers, Strings, Arrays, Sets, Objects, and Maps? Getting yourself comfortable with the items on this list will make learning the Node API much easier. For example, trying to learn the ‘fs’ module methods before you have a good understanding of callbacks may lead to unnecessary confusion.
Understand the non-blocking nature of Node
Callbacks and promises (and generators/async patterns) are especially important for Node. You need to understand how asynchronous operations are first class in Node.
You can compare the non-blocking nature of lines of code in a Node program to the way you order a Starbucks coffee (in the store, not the drive-thru):
Place your order | Give Node some instructions to execute (a function)
Customize your order, no whipped cream for example | Give the function some arguments: ({whippedCream: false})
Give the Starbucks worker your name with the order | Give Node a callback with your function: ({whippedCream: false}, callback)
Step aside and the Starbucks worker will take orders from people who were after you in line | Node will take instructions from lines after yours.
When your order is ready, the Starbucks worker will call your name and give you your order | When your function is computed and Node.js has a ready result for you, it’ll call your callback with that result: callback(result)
I’ve written a blog post about this: Asynchronous Programming as Seen at Starbucks
hello world !!!!!!!!
Keep in mind though, that root is only a personal preference. You can call the id whatever you like. You only need to make sure that it matches up later on when you sync the html to your JavaScript code.
This div will function like it does in React. It will tell the JavaScript library, in this case Vue, where to look in the DOM when it wants to start making changes.
Once that’s done, you’re going to create a JavaScript file that will house all the Vue code. Call it app.js, to stay consistent.
So now that you have your files ready to go, let’s get into how Vue displays element onto the browser.
Vue uses a template-like approach when it comes to manipulating the DOM. This means that your HTML file will not only have an empty div, like in React. You’re actually going to write a good part of your code in your HTML file.
To give you a better idea, think back on what it takes to create a list of name using plain HTML. A <ul> element with some <li> elements inside. In Vue, you are going to do almost the exact same thing, with only a few changes added in.

A directive is Vue’s way of adding JavaScript functionality straight into the HTML. They all start with v- and are followed by descriptive names that give you an idea of what they are doing. In this case, it’s a for loop. For every name in your list of names, listOfNames, you want to copy this <li> element and replace it with a new <li> element with a name from your list.
Now, the code only needs one final touch. Currently, it will display an <li> element for every name in your list, but you have not actually told it to display the actual name onto the browser. To fix that, you are going to insert some mustache like syntax inside your <li> element. Something you might have seen in some other JavaScript libraries.
<ul>
  <li v-for=’name in listOfNames’>
    {{name}}
  </li>
</ul>
Now the <li> element is complete. It will now display each item inside a list called listOfNames. Keep in mind that the word name is arbitrary. You could have called it item and it would have served the same purpose. All the keyword does is serve as a placeholder that will be used to iterate over the list.
The last thing that you need to do is create the data set and actually initialize Vue in your application.
To do so, you will need to create a new Vue instance. Instantiate it by assigning it to a variable called app.
let app = new Vue({
});
Now, the object is going to take in a few parameters. The first one being the most important, the el (element) parameter that tells Vue where to start adding things to the DOM. Just like you did with your React example.
let app = new Vue({
  el:’#root’,
});
The final step is to add the data to the Vue application. In Vue, all the data passed into the application will be done so as a parameter to the Vue instance. Also, each Vue instance can only have one parameter of each kind. While there are quite a few, you only need to focus on two for this example, el and data.
Objec­tive : In chess, a queen can move as far as she pleases, hor­i­zon­tally, ver­ti­cally, or diag­o­nally. A chess board has 8 rows and 8 columns. The stan­dard 8 by 8 Queen’s prob­lem asks how to place 8 queens on an ordi­nary chess board so that none of them can hit any other in one move.(Source: http://www.math.utah.edu/~alfeld/queens/queens.html)

Here we are solv­ing it for N queens in NxN chess board.

This article will challenge the very limits of your Node.js knowledge.
I started learning Node.js shortly after Ryan Dahl first presented it, and I wasn’t able to answer a lot of the questions I ask in this article even a year ago. If you can truly answer all of these questions, then your knowledge of Node.js is beyond great. We should be friends.
The reason I think this challenge will take you by surprise is that many of us have been mostly learning Node the wrong way. Most tutorials, books, and courses about Node focus on the Node ecosystem — not the Node runtime itself. They focus on teaching what can be done with all the packages available for you when you work with Node, like Express and Socket.IO, rather than teaching the capabilities of the Node runtime itself.
There are good reasons for this. Node is raw and flexible. It doesn’t provide complete solutions, but rather provides a rich runtime that enables you to implement solutions of your own. Libraries like Express.js and Socket.IO are more of complete solutions, so it makes more sense to teach those libraries, so you can enable learners to use these complete solutions.
The conventional wisdom seems to be that only those whose job is to write libraries like Express.js and Socket.IO need to understand everything about the Node.js runtime. But I think this is wrong. A solid understanding of the Node.js runtime itself is the best thing you can do before using those complete solutions. You should at least have the knowledge and confidence to judge a package by its code, so you can make an educated decision about using it.
This is why I decided to create a Pluralsight course fully dedicated to pure Node. While doing the research for the course, I put together a list of specific questions for you to determine whether your knowledge of the Node runtime is already strong enough, or if it could be improved.
If you can answer most of these questions and you’re looking for a job, let me know! If on the other hand, most of these questions take you by surprise, you just need to make learning the Node runtime itself a priority. Your knowledge of that will make you a much more desirable developer.
The Node.js knowledge challenge:
Some of these questions are short and easy while others require longer answers and deeper knowledge. They are all presented here in no particular order.
I know that you’re going to want answers after reading this list. The advice section below has some answers, but I’ll also be answering all of these questions in a series of freeCodeCamp articles after this one. But let me tease your knowledge first!
What is the relationship between Node.js and V8? Can Node work without V8?
How come when you declare a global variable in any Node.js file it’s not really global to all modules?
When exporting the API of a Node module, why can we sometimes use exports and other times we have to use module.exports?
Can we require local files without using relative paths?
Can different versions of the same package be used in the same application?
What is the Event Loop? Is it part of V8?
What is the Call Stack? Is it part of V8?
What is the difference between setImmediate and process.nextTick?
How do you make an asynchronous function return a value?
Can callbacks be used with promises or is it one way or the other?
What Node module is implemented by most other Node modules?
What are the major differences between spawn, exec, and fork?
How does the cluster module work? How is it different than using a load balancer?
What are the --harmony-* flags?
How can you read and inspect the memory usage of a Node.js process?
What will Node do when both the call stack and the event loop queue are empty?
What are V8 object and function templates?
What is libuv and how does Node.js use it?
How can you make Node’s REPL always use JavaScript strict mode?
What is process.argv? What type of data does it hold?
How can we do one final operation before a Node process exits? Can that operation be done asynchronously?
What are some of the built-in dot commands that you can use in Node’s REPL?
Besides V8 and libuv, what other external dependencies does Node have?
What’s the problem with the process uncaughtException event? How is it different than the exit event?
What does the _ mean inside of Node’s REPL?
Do Node buffers use V8 memory? Can they be resized?
What’s the difference between Buffer.alloc and Buffer.allocUnsafe?
How is the slice method on buffers different from that on arrays?
What is the string_decoder module useful for? How is it different than casting buffers to strings?
What are the 5 major steps that the require function does?
How can you check for the existence of a local module?
What is the main property in package.json useful for?
What are circular modular dependencies in Node and how can they be avoided?
What are the 3 file extensions that will be automatically tried by the require function?
When creating an http server and writing a response for a request, why is the end() function required?
When is it ok to use the file system *Sync methods?
How can you print only one level of a deeply nested object?
What is the node-gyp package used for?
The objects exports, require, and module are all globally available in every module but they are different in every module. How?
If you execute a node script file that has the single line: console.log(arguments);, what exactly will node print?
How can a module be both requirable by other modules and executable directly using the node command?
What’s an example of a built-in stream in Node that is both readable and writable?
What happens when the line cluster.fork() gets executed in a Node script?
What’s the difference between using event emitters and using simple callback functions to allow for asynchronous handling of code?
What is the console.time function useful for?
What’s the difference between the Paused and the Flowing modes of readable streams?
What does the --inspect argument do for the node command?
How can you read data from a connected socket?
The require function always caches the module it requires. What can you do if you need to execute the code in a required module many times?
When working with streams, when do you use the pipe function and when do you use events? Can those two methods be combined?
My take on the best way to learn the Node.js runtime
Learning Node.js can be challenging. Here are some of the guidelines that I hope will help along that journey:
Learn the good parts of JavaScript and learn its modern syntax (ES2015 and beyond)
Node is a set of libraries on top of a VM engine which can compile JavaScript so it goes without saying that the important skills for JavaScript itself is a subset of the important skills for Node. You should start with JavaScript itself.
Do you understand functions, scopes, binding, this keyword, new keyword, closures, classes, module patterns, prototypes, callbacks, and promises? Are you aware of the various methods that can be used on Numbers, Strings, Arrays, Sets, Objects, and Maps? Getting yourself comfortable with the items on this list will make learning the Node API much easier. For example, trying to learn the ‘fs’ module methods before you have a good understanding of callbacks may lead to unnecessary confusion.
Understand the non-blocking nature of Node
Callbacks and promises (and generators/async patterns) are especially important for Node. You need to understand how asynchronous operations are first class in Node.
You can compare the non-blocking nature of lines of code in a Node program to the way you order a Starbucks coffee (in the store, not the drive-thru):
Place your order | Give Node some instructions to execute (a function)
Customize your order, no whipped cream for example | Give the function some arguments: ({whippedCream: false})
Give the Starbucks worker your name with the order | Give Node a callback with your function: ({whippedCream: false}, callback)
Step aside and the Starbucks worker will take orders from people who were after you in line | Node will take instructions from lines after yours.
When your order is ready, the Starbucks worker will call your name and give you your order | When your function is computed and Node.js has a ready result for you, it’ll call your callback with that result: callback(result)
I’ve written a blog post about this: Asynchronous Programming as Seen at Starbucks
